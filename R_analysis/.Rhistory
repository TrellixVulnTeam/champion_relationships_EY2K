print(paste("graph(", "Bull", ")"))
print(paste("graph(", "Bull", ")"))
print(paste("graph(Bull)"))
print(paste("graph(/'Bull/')"))
print(paste("graph(/'Bull')"))
print(paste("graph('Bull')"))
ap = Bull
ap = 'Bull'
print(paste("graph('ap')"))
print(paste("graph(/'ap/')"))
print(paste("graph(", ap , ")"))
print(paste("graph('", ap , "')"))
print(paste("graph('", ap , "')"))
print(paste("graph('", ap , "')", sep=""))
setwd("C:\\Users\\TORRES_SANT\\Documents\\Programming\\webscrapping\\champion_relationships")
dir
ls
list
dir
path
list.files
list.files()
install.packages('igraph')
install.packages('tibble')
""
" "
is.null("")
jsonchamp_relations = fromJSON("champions.json")
library(jsonlite)
jsonchamp_relations = fromJSON("champions.json")
jsonchamp_relations[0]
jsonchamp_relations[0][1]
jsonchamp_relations[0][2]
jsonchamp_relations[0][1][1][1][1]
jsonchamp_relations[[0]]
jsonchamp_relations[[0]][[1]]
jsonchamp_relations[0][[1]]
jsonchamp_relations[[0]][[1]][[1]][[1]][[1]]
jsonchamp_relations[[1]][[1]][[1]][[1]][[1]]
jsonchamp_relations[[1]]
jsonchamp_relations[[1]][[0]]
jsonchamp_relations[[1]][[1]]
jsonchamp_relations[[2]][[1]]
jsonchamp_relations[[3]][[1]]
jsonchamp_relations[[4]][[1]]
jsonchamp_relations[[4]][[2]]
jsonchamp_relations[[2]][[2]]
jsonchamp_relations[['Anivia']]
jsonchamp_relations[['Anivia'],]
jsonchamp_relations[['Independent']]
jsonchamp_relations[["Independent"]]
jsonchamp_relations[["Independent"]][[]]
jsonchamp_relations[["Independent"]][[2]]
jsonchamp_relations[["Independent"]][[2]]1
jsonchamp_relations[["Independent"]][[2]]1
summary(jsonchamp_relations)
str(jsonchamp_relations)
head(jsonchamp_relations$faction)
colnames(jsonchamp_relations)
colnames(jsonchamp_relations)[1]
colnames(jsonchamp_relations)[1] = "champs"
colnames(jsonchamp_relations)[1]
> n = c(2, 3, 5)
> s = c("aa", "bb", "cc")
> b = c(TRUE, FALSE, TRUE)
> df = data.frame(n, s, b)
> n = c(2, 3, 5)
n = c(2, 3, 5)
s = c("aa", "bb", "cc")
b = c(TRUE, FALSE, TRUE)
df = data.frame(n, s, b)
colnames(df) <- c("one","two","three")
size(jsonchamp_relations)
length(jsonchamp_relations)
height(jsonchamp_relations)
nrow(jsonchamp_relations)
jsonchamp_relations[1,1]
jsonchamp_relations[1,]
colnames(jsonchamp_relations)[1] = "faction"
jsonchamp_relations[1,]
numChamps <- nrow(champ_relations)
numChamps
#what are the column names?
colnames(champ_relations)
# i dont like the order so lets change it up
newchamp_relations <- champ_relations[,c(2,1,3,4)]
head(newchamp_relations)
champ_relations = fromJSON("champions.json")
numChamps <- nrow(champ_relations)
numChamps
#what are the column names?
colnames(champ_relations)
# i dont like the order so lets change it up
newchamp_relations <- champ_relations[,c(2,1,3,4)]
head(newchamp_relations)
for (champ in newchamp_relations$champion_name){
print('test')
vertexNames = vertexNames + champ
}
head(newchamp_relations$friends)
newchamp_relations$friends[[2]]
newchamp_relations$friends[[2]][1]
length(newchamp_relations$friends[[2]])
newchamp_relations$friends[[2]][1]
library(tibble)
library(ggplot2)
library(igraph)
library(jsonlite)
#how long is this? how many champions
numChampions <- nrow(champ_relations)
numChampions
#what are the column names?
colnames(champ_relations)
# i dont like the order so lets change it up
newchamp_relations <- champ_relations[,c(2,1,3,4)]
head(newchamp_relations)
# lets try create a vector of all the champions
testVertexNames <- as.vector(newchamp_relations$champion_name)
head(testVertexNames)
#this weird format is due to the JSON data
#lets just iterate through the champion names to store the vertexNames
vertexNames <- c()
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,champ)
}
length(vertexNames) #should be 133
length(vertexNames) == numChampions
head(vertexNames)
myGraph <- make_empty_graph() + vertices( vertexNames )
myGraph
head(newchamp_relations$friends)
# note the pair in [[2]]
# we have to create a better loop
# so we have to create an instance of the champion for each friend connection it has
#get champion
edgeList <- c() #empty edge for loop
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
edgeList = c(edgeList,champName,newchamp_relations$friends[[i]][f])
f = f + 1
}
f = 1
i = i +1
}
head(edgeList)
#awesome, it works
myGraph <- myGraph + edges( edgeList )
typeof(edgeList)
typeof(vertexNames)
length(edgeList)
typeof(edgeList)
add_edges(myGraph, edgeList)
head(vertexNames)
g <- make_empty_graph() + vertices( vertexNames )
add_edges(g, edgeList)
vertexNames
typeof(vertexNames)
edgeList
head(newchamp_relations$friends)
# note the pair in [[2]]
# we have to create a better loop
# so we have to create an instance of the champion for each friend connection it has
#get champion
edgeList <- c() #empty edge for loop
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
if (newchamp_relations$friends[[i]][f] !="")
{
edgeList = c(edgeList,champName,newchamp_relations$friends[[i]][f])
}
f = f + 1
}
f = 1
i = i +1
}
edgeList
champ_relations = fromJSON("champions.json")
#champ_relations = read.csv("champions.csv")
```
## Exploring The Data
Lets take a look at the data we got in our newly created .csv file.
```{r}
#how long is this? how many champions
numChampions <- nrow(champ_relations)
numChampions
#what are the column names?
colnames(champ_relations)
newchamp_relations <- champ_relations[,c(2,3,1,4)]
head(newchamp_relations)
vertexNames <- c()
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,champ)
}
length(vertexNames) #should be 133
length(vertexNames) == numChampions
head(vertexNames)
g <- make_empty_graph() + vertices( vertexNames )
g
edgeList <- c() #empty edge for loop
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
if (newchamp_relations$friends[[i]][f] !="")
{
edgeList = c(edgeList,champName,newchamp_relations$friends[[i]][f])
}
f = f + 1
}
f = 1
i = i +1
}
head(edgeList)
setwd("C:\\Users\\TORRES_SANT\\Documents\\Programming\\Data")
courses <- read.xls( 'prerequisites.xlsx' )
install.packages('xslx')
require(xlsReadWrite)
xls.getshlib()
df = read.xls("prerequisites.xls", sheet = 1)
install.packages('xlsReadwrite')
install.packages('rjava')
install.packages('rJava')
install.packages('xslx')
install.packages('readxl')
courses <- read.csv('prerequisites2.csv')
head( courses )
vertexNamesz <- as.vector( courses$Id )
vertexNamesz
myGraph <- make_empty_graph() + vertices( vertexNames )
myGraph
edges <- read.csv( 'prerequisites.csv')
head( edges )
edgeListz <- c( t( as.matrix( edges ) ) )
head( edgeListz )
myGraph <- myGraph + edges( edgeList )
net <- graph_from_data_frame(d=edgeList, vertices=vertexNames, directed=T)
df = as.data.frame(edgeList)
df1 = as.data.frame(vertexNames)
net <- graph_from_data_frame(d=df, vertices=df1, directed=T)
head(df1)
df.1["new.col"] = vertexNames
df1["new.col"] = vertexNames
head(df1)
net <- graph_from_data_frame(d=df, vertices=df1, directed=T)
head(df)
edgeList <- c() #empty edge for loop
edgeListCol2 <- c()
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
if (newchamp_relations$friends[[i]][f] !="")
{
edgeList = c(edgeList,champName)
edgeListCol2 = c(edgeListCol2, newchamp_relations$friends[[i]][f])
}
f = f + 1
}
f = 1
i = i +1
}
dfEdge = as.data.frame(edgeList)
dfEdge["target"] = edgeListCol2
dfVertex = as.data.frame(vertexNames)
dfVertex["ID"] = vertexNames
net <- graph_from_data_frame(d=dfEdge, vertices=dfVertex, directed=T)
edgeList
target
dfEdge
dfVertex
unique(edgeList)
dfEdge
vertexNames
dfEdge = as.data.frame(edgeList)
dfEdge["target"] = factor(edgeListCol2)
dfVertex = as.data.frame(vertexNames)
dfVertex["ID"] = factor(vertexNames)
g <- graph_from_data_frame(d=dfEdge,vertices=dfVertex,directed = T)
g <- graph_from_data_frame(d=dfEdge,vertices=dfVertex,directed = FALSE)
g <- graph_from_data_frame(d=dfEdge,vertices=dfVertex,directed = TRUE)
for (edge in dfEdge$edgeList) {}
dfEdge[1]
dfEdge[1][1]
dfEdge[[1]]
dfEdge[[1]][1]
edgeList[1]
is.null(vertexNames[[edgeList[1]]])
is.null(vertexNames["Anivia"])
is.null(vertexNames["Ani"])
exists(vertexNames["Ani"])
exists(vertexNames["Anivia"])
exists(vertexNames["Aatrox"])
exists(vertexNames, "Anivia")
exists(vertexNames, 'Anivia')
any(names(vertexNames) == "Anivia")
any(vertexNames == "Anivia")
any(vertexNames == "Anivi")
any(vertexNames != "Anivi")
for (edge in edgeList){
i = 1
count = 0
if (any(vertexNames != edgeList[i])) {
print(edgeList[i])
count = count + 1
}
}
any(vertexNames != "Anivia")
for (edge in edgeList){
i = 1
count = 0
if (any(vertexNames == edgeList[i]))
{
print(edgeList[i])
count = count + 1
i = i + 1
}
}
for (edge in edgeList){
i = 1
count = 0
if (any(vertexNames == edgeList[i]))
{
print(edgeList[i])
count = count + 1
}
i = i + 1
print(count)
}
q = 1
count = 0
for (edge in edgeList){
if (any(vertexNames == edgeList[q]))
{
print(edgeList[q])
count = count + 1
}
q = q + 1
print(count)
}
dfVertex[1]
dfVertex[1][1]
dfVertex[[1][1]
dfVertex[[1]][1]
any(dfVertex[1] == dfEdge[[1]][1])
any(dfVertex[[1]] == dfEdge[[1]][1])
dfEdge$edgeList[1]
vertexNamesz
dfEdge$edgeList %in% dfVertex$vertexNames
dfEdge$target %in% dfVertex$vertexNames
dfEdge$target[!dfEdge$target %in% dfVertex$vertexNames]
dfVertex$vertexNames
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,toupper(champ))
}
vertexNames = ""
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,toupper(champ))
}
champ_relations = fromJSON("champions.json")
library(tibble)
library(ggplot2)
library(igraph)
library(jsonlite)
setwd("C:\\Users\\TORRES_SANT\\Documents\\Programming\\webscrapping\\champion_relationships")
champ_relations = fromJSON("champions.json")
#how long is this? how many champions
numChampions <- nrow(champ_relations)
numChampions
#what are the column names?
colnames(champ_relations)
# i dont like the order so lets change it up
newchamp_relations <- champ_relations[,c(2,3,1,4)]
head(newchamp_relations)
# lets try create a vector of all the champions
testVertexNames <- as.vector(newchamp_relations$champion_name)
head(testVertexNames)
#this weird format is due to the JSON data
#lets just iterate through the champion names to store the vertexNames
vertexNames <- c()
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,toupper(champ))
}
length(vertexNames) #should be 133
length(vertexNames) == numChampions
head(vertexNames)
edgeList <- c() #empty edge for loop
edgeListCol2 <- c()
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
if (newchamp_relations$friends[[i]][f] !="")
{
edgeList = c(edgeList,toupper(champName))
edgeListCol2 = c(edgeListCol2, toupper(newchamp_relations$friends[[i]][f]))
}
f = f + 1
}
f = 1
i = i +1
}
vertexNames = "SKAARL"
#attempting to make this as abstract as possible for reuse.
library(tibble)
library(ggplot2)
library(igraph)
library(jsonlite)
setwd("C:\\Users\\TORRES_SANT\\Documents\\Programming\\webscrapping\\champion_relationships")
champ_relations = fromJSON("champions.json")
#champ_relations = read.csv("champions.csv")
```
## Exploring The Data
Lets take a look at the data we got in our newly created .json file.
```{r}
#how long is this? how many champions
numChampions <- nrow(champ_relations)
numChampions
#what are the column names?
colnames(champ_relations)
# i dont like the order so lets change it up
newchamp_relations <- champ_relations[,c(2,3,1,4)]
head(newchamp_relations)
# lets try create a vector of all the champions
testVertexNames <- as.vector(newchamp_relations$champion_name)
head(testVertexNames)
#this weird format is due to the JSON data
#lets just iterate through the champion names to store the vertexNames
vertexNames <- c()
for (champ in newchamp_relations$champion_name){
vertexNames = c(vertexNames,toupper(champ))
}
length(vertexNames) #should be 133
length(vertexNames) == numChampions
head(vertexNames)
#However, it turns out there is a relationship with a non champion!, Kled has a friend Skarl which appears in the data
vertexNames = c(vertexNames, "SKAARL")
head(newchamp_relations$friends)
# note the pair in [[2]]
# we have to create a better loop
# so we have to create an instance of the champion for each friend connection it has
#get champion
#the original data
edgeList <- c() #empty edge for loop
edgeListCol2 <- c()
i = 1
f = 1
while(i <= numChampions) {
#champName
champName = newchamp_relations$champion_name[[i]]
#how many friends?
numFriends = length(newchamp_relations$friends[[i]])
while (numFriends > 0 && f <= numFriends){
if (newchamp_relations$friends[[i]][f] !="")
{
edgeList = c(edgeList,toupper(champName))
edgeListCol2 = c(edgeListCol2, toupper(newchamp_relations$friends[[i]][f]))
}
f = f + 1
}
f = 1
i = i +1
}
dfEdge = as.data.frame(edgeList)
dfEdge["target"] = factor(edgeListCol2)
dfVertex = as.data.frame(vertexNames)
dfVertex["ID"] = factor(vertexNames)
head(edgeList)
g = graph_from_data_frame(d=dfEdge, vertices = dfVertex, directed = T)
graph(g)
dfVertex = as.data.frame(vertexNames, stringsAsFactors=FALSE)
dfVertex["ID"] = vertexNames
dfEdge = as.data.frame(edgeList, stringsAsFactors=FALSE)
dfEdge["target"] = edgeListCol2
g = graph_from_data_frame(d=dfEdge, vertices = dfVertex, directed = T)
graph(g)
help('igraph')
g
print(g)
print(g,graph.attributes = igraph_opt("print.graph.attributes"))
summary.igraph(g)
summary(g)
str(g)
tkplot(g)
plot(g)
install.packages('png')
install.packages('jsonlit')
install.packages('jsonlite')
install.packages("jsonlite")
